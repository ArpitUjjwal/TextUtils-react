{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","placeholder","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","s","chars","split","i","length","join","alternateCase","map","currentValue","slice","navigator","clipboard","writeText","defaultProps","Alert","alert","role","word","lower","charAt","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","showheading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oMAKe,SAASA,EAAOC,GAC3B,OACI,8BACI,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACI,sBAAKD,UAAU,kBAAf,UACI,mBAAGA,UAAU,eAAeE,KAAK,IAAjC,SAAsCH,EAAMI,QAC5C,wBAAQH,UAAU,iBAAiBI,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACA,sBAAMJ,UAAU,0BAEhB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACA,oBAAIL,UAAU,kCAAd,SACI,oBAAIA,UAAU,WAAd,SACA,mBAAGA,UAAU,kBAAkB,eAAa,OAAOE,KAAK,IAAxD,sBAMJ,sBAAKF,UAAS,sCAA8C,UAAbD,EAAME,KAAe,OAAO,SAA3E,UACI,uBAAOD,UAAU,mBAAmBM,QAASP,EAAMQ,WAAYH,KAAK,WAAWC,GAAG,2BAClF,uBAAOL,UAAU,mBAAmBQ,QAAQ,yBAA5C,0CCtBT,SAASC,EAASV,GAC7B,IAkDA,EAAwBW,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,OACI,qCACA,sBAAKZ,UAAU,YAAYa,MAAO,CAACC,MAAoB,SAAbf,EAAME,KAAc,QAAQ,SAAtE,UACI,6BAAKF,EAAMgB,UACX,qBAAKf,UAAU,OAAf,SACI,0BAAUgB,YAAY,sBAAsBhB,UAAU,eAAeiB,MAAON,EAAMO,SATvE,SAACC,GACpBP,EAAQO,EAAMC,OAAOH,QAQ+FJ,MAAO,CAACQ,gBAA8B,SAAbtB,EAAME,KAAc,UAAU,QAASa,MAAoB,SAAbf,EAAME,KAAc,QAAQ,SAAUI,GAAG,QAAQiB,KAAK,QAE7O,wBAAQtB,UAAU,uBAAuBM,QA1D3B,WAElB,IAAIiB,EAAUZ,EAAKa,cACnBZ,EAAQW,GACRxB,EAAM0B,UAAU,0BAA2B,YAsDvC,kCACA,wBAAQzB,UAAU,yBAAyBM,QApD7B,WAElB,IAAIiB,EAAUZ,EAAKe,cACnBd,EAAQW,GACRxB,EAAM0B,UAAU,0BAA2B,YAgDvC,kCACA,wBAAQzB,UAAU,uBAAuBM,QAxCtB,WACvB,IAOIiB,EAPgB,SAAUI,GAE1B,IADA,IAAIC,EAAQD,EAAED,cAAcG,MAAM,IACzBC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,GAAK,EACrCF,EAAME,GAAKF,EAAME,GAAGN,cAEtB,OAAOI,EAAMI,KAAK,IAERC,CAActB,GAC5BC,EAAQW,GACRxB,EAAM0B,UAAU,+BAAgC,YA8B5C,uCACA,wBAAQzB,UAAU,oBAAoBM,QAvBtB,WACpB,IAAIiB,EAAUZ,EAAKkB,MAAM,KAAKK,KAAI,SAACC,GAE/B,OADcA,EAAa,GAAGX,cAAgBW,EAAaC,MAAM,MAGrExB,EAAQW,EAAQS,KAAK,MACrBjC,EAAM0B,UAAU,0BAA2B,YAiBvC,mCACA,wBAAQzB,UAAU,sBAAsBM,QAhDvB,WAErBM,EADc,IAEdb,EAAM0B,UAAU,gBAAiB,YA6C7B,wBACA,wBAAQzB,UAAU,uBAAuBM,QA9BzB,WACpB+B,UAAUC,UAAUC,UAAU5B,GAC9BZ,EAAM0B,UAAU,eAAgB,YA4B5B,uBACA,0BAEJ,sBAAKzB,UAAU,iBAAiBa,MAAO,CAACC,MAAoB,SAAbf,EAAME,KAAc,QAAQ,SAA3E,UACI,mDACA,8BAAIU,EAAKkB,MAAM,KAAKE,OAApB,YAAqCpB,EAAKoB,OAA1C,iBACA,8BAAI,KAAQpB,EAAKkB,MAAM,KAAKE,OAA5B,sBACA,uBACA,yCACA,4BAAIpB,EAAKoB,OAAO,EAAEpB,EAAK,8BDtCnCb,EAAO0C,aAAe,CAClBrC,MAAO,kBEzBIsC,MAZf,SAAe1C,GAKX,OACIA,EAAM2C,OAAS,sBAAK1C,UAAS,sBAAiBD,EAAM2C,MAAMtC,KAA7B,gCAAiEuC,KAAK,QAApF,UACX,iCANW,SAACC,GAChB,IAAMC,EAAQD,EAAKlB,cACnB,OAAOmB,EAAMC,OAAO,GAAGtB,cAAgBqB,EAAMT,MAAM,GAItCW,CAAWhD,EAAM2C,MAAMtC,QADrB,KACuCL,EAAM2C,MAAMM,QCsD3DC,MAlDf,WACE,MAAwBvC,mBAAS,SAAjC,mBAAOT,EAAP,KAAaiD,EAAb,KAEA,EAA0BxC,mBAAS,MAAnC,mBAAOgC,EAAP,KAAcS,EAAd,KAEM1B,EAAY,SAAC2B,EAAShD,GAC1B+C,EAAS,CACPH,IAAKI,EACLhD,KAAMA,IAERiD,YAAW,WACTF,EAAS,QACR,OAkBL,OACE,qCAEA,cAACrD,EAAD,CAAQK,MAAM,YAAYF,KAAMA,EAAMM,WAlBrB,WACL,UAATN,GACDiD,EAAQ,QACRI,SAASC,KAAK1C,MAAMQ,gBAAiB,UACrCI,EAAU,6BAA8B,WACxC6B,SAASnD,MAAQ,0BAGjB+C,EAAQ,SACRI,SAASC,KAAK1C,MAAMQ,gBAAiB,QACrCI,EAAU,8BAA+B,WACzC6B,SAASnD,MAAQ,6BAQnB,cAAC,EAAD,CAAOuC,MAAOA,IACd,qBAAK1C,UAAU,iBAAf,SAMQ,cAACS,EAAD,CAAUgB,UAAWA,EAAW+B,YAAY,kCAAkCvD,KAAMA,UC1CjFwD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFd,SAASe,eAAe,SAM1BZ,K","file":"static/js/main.810467c2.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n// import { Link } from 'react-router-dom';\n\n\nexport default function Navbar(props) {\n    return (\n        <div>\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n                <div className=\"container-fluid\">\n                    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li className=\"nav-item\">\n                        <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\n                        </li>\n                        {/* <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/about\">About</Link>\n                        </li> */}\n                    </ul>\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\n                    </div>\n                    </div>\n                </div>\n            </nav>\n        </div>\n    )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired\n}\n\nNavbar.defaultProps = {\n    title: 'Set Title here'\n  };","import React, {useState} from 'react'\n\n\nexport default function TextForm(props) {\n    const handleUpClick = () => {\n        // console.log(\"Uppercase was clicked\");\n        let newText = text.toUpperCase();\n        setText(newText);\n        props.showAlert(\"Converted to uppercase!\", \"success\");\n    }\n\n    const handleLoClick = () => {\n        // console.log(\"Uppercase was clicked\");\n        let newText = text.toLowerCase();\n        setText(newText);\n        props.showAlert(\"Converted to lowercase!\", \"success\");\n    }\n\n    const handleClearClick = () => {\n        let newText = '';\n        setText(newText);\n        props.showAlert(\"Text Cleared!\", \"success\");\n    }\n\n    const handleAltCaseClick = () => {\n        var alternateCase = function (s) {\n            var chars = s.toLowerCase().split(\"\");\n            for (var i = 0; i < chars.length; i += 2) {\n              chars[i] = chars[i].toUpperCase();\n            }\n            return chars.join(\"\");\n          };\n        let newText = alternateCase(text);\n        setText(newText);\n        props.showAlert(\"Converted to alternate case!\", \"success\");\n    }\n\n    const handleCopyClick = () => {\n        navigator.clipboard.writeText(text);\n        props.showAlert(\"Text Copied!\", \"success\");\n    }\n\n    const handleTitleCase = () => {\n        let newText = text.split(\" \").map((currentValue) => {\n            let newText = currentValue[0].toUpperCase() + currentValue.slice(1);\n            return newText;\n        });\n        setText(newText.join(\" \"));\n        props.showAlert(\"Converted to titlecase!\", \"success\")\n    }\n\n    const handleOnChange = (event) => {\n        setText(event.target.value);\n    }\n    const [text, setText] = useState('');    \n    return (\n        <>\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\n            <h1>{props.heading}</h1>\n            <div className=\"mb-3\">\n                <textarea placeholder=\"Your text goes here\" className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#BEBEBE':'white', color: props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\n            </div>\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick} >Convert to Uppercase</button>\n            <button className=\"btn btn-secondary mx-1\" onClick={handleLoClick} >Convert to Lowercase</button>\n            <button className=\"btn btn-warning mx-1\" onClick={handleAltCaseClick} >Convert to Alternate Case</button>\n            <button className=\"btn btn-info mx-1\" onClick={handleTitleCase} >Convert to Title Case</button>\n            <button className=\"btn btn-danger mx-1\" onClick={handleClearClick} >Clear Text</button>\n            <button className=\"btn btn-success mx-1\" onClick={handleCopyClick} >Copy Text</button>\n            <hr/>\n        </div>\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}}>\n            <h2>Your Text Summary</h2>\n            <p>{text.split(\" \").length} words , {text.length} characters</p>\n            <p>{0.008 * text.split(\" \").length} Minutes to read</p>\n            <hr/>\n            <h2>Preview</h2>\n            <p>{text.length>0?text:\"Text Field is empty\"}</p>\n        </div>\n        </>\n    )\n}","import React from 'react'\n\nfunction Alert(props) {\n    const capitalize = (word)=>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\n        </div>\n    )\n}\n\nexport default Alert\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert'\n// import About from './components/About';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // whether dark mode is enabled or not \n\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message, type) =>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = ()=> {\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor= '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Dark Mode';\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor= 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Light Mode';\n    }\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n    <Alert alert={alert} />\n    <div className=\"container my-3\">\n    {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\"> */}\n            <TextForm showAlert={showAlert} showheading=\"Enter the text to analyze below\" mode={mode}/>\n          {/* </Route> */}\n    {/* </Switch> */}\n    </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}